import 'dart:io';

import 'package:mason/mason.dart';

Future<void> run(HookContext context) async {
  final generatedDir = Directory.current;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dart –≤ PATH
  if (!await _isDartAvailable()) {
    context.logger.warn('‚ö†Ô∏è  Dart CLI not found in PATH');
    context.logger.info(
      'üí° Please run "dart format ." manually to format generated files',
    );
    return;
  }

  context.logger.info('üé® Formatting generated Dart files...');

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .dart —Ñ–∞–π–ª—ã
  final dartFiles = await _findDartFiles(generatedDir);

  if (dartFiles.isEmpty) {
    context.logger.detail('No Dart files found to format');
    return;
  }

  context.logger.detail('Found ${dartFiles.length} Dart files');

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º dart format —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    final result = await Process.run(
      'dart',
      ['format', ...dartFiles.map((f) => f.path)],
      workingDirectory: generatedDir.path,
    );

    if (result.exitCode == 0) {
      context.logger.success(
        '‚úÖ Successfully formatted ${dartFiles.length} Dart files',
      );
    } else {
      context.logger.warn('‚ö†Ô∏è  dart format completed with warnings');
      if (result.stderr.toString().isNotEmpty) {
        context.logger.detail('stderr: ${result.stderr}');
      }
    }

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º dart analyze –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await _runAnalyze(context, generatedDir);
  } catch (e) {
    context.logger.warn('‚ö†Ô∏è  Could not run dart format: $e');
    context.logger.info(
      'üí° Run "dart format ." manually to format the generated files',
    );
  }
}

Future<bool> _isDartAvailable() async {
  try {
    final result = await Process.run('dart', ['--version']);
    return result.exitCode == 0;
  } catch (e) {
    return false;
  }
}

Future<List<File>> _findDartFiles(Directory dir) async {
  final dartFiles = <File>[];

  await for (final entity in dir.list(recursive: true)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      dartFiles.add(entity);
    }
  }

  return dartFiles;
}

Future<void> _runAnalyze(HookContext context, Directory dir) async {
  try {
    context.logger.detail('Running dart analyze...');
    final result = await Process.run(
      'dart',
      ['analyze'],
      workingDirectory: dir.path,
    );

    // –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å
    context.logger.detail('=== DART ANALYZE RESULT ===');
    context.logger.detail('Exit code: ${result.exitCode}');
    context.logger.detail('STDOUT:\n"${result.stdout}"');
    context.logger.detail('STDERR:\n"${result.stderr}"');
    context.logger.detail('=== END RESULT ===');

    if (result.exitCode == 0) {
      context.logger.success('‚úÖ No analysis issues found');
    } else {
      context.logger.warn('‚ö†Ô∏è  Analysis found issues');
    }
  } catch (e) {
    context.logger.detail('Could not run dart analyze: $e');
  }
}
